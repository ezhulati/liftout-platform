// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enums
enum UserType {
  individual
  company
  admin
}

enum AvailabilityStatus {
  available
  open_to_opportunities
  not_available
}

enum TeamAvailabilityStatus {
  available
  interviewing
  not_available
}

enum TeamVisibility {
  public
  private
  anonymous
}

enum RemotePreference {
  remote
  hybrid
  onsite
}

enum ProficiencyLevel {
  beginner
  intermediate
  advanced
  expert
}

enum CompanySize {
  startup
  small
  medium
  large
  enterprise
}

enum VerificationStatus {
  pending
  verified
  rejected
}

enum SeniorityLevel {
  entry
  mid
  senior
  lead
  principal
}

enum MemberStatus {
  active
  inactive
  pending
}

enum OpportunityStatus {
  active
  paused
  filled
  expired
}

enum UrgencyLevel {
  low
  standard
  high
  urgent
}

enum ApplicationStatus {
  submitted
  reviewing
  interviewing
  accepted
  rejected
}

enum InterestStatus {
  pending
  accepted
  declined
  expired
}

enum ConversationStatus {
  active
  archived
  blocked
}

enum MessageType {
  text
  file
  system
  video_invite
}

enum NotificationType {
  team_invite
  company_interest
  message
  match
  application_update
}

enum Priority {
  low
  medium
  high
  urgent
}

enum SubscriptionPlan {
  free
  pro
  premium
  enterprise
}

enum SubscriptionStatus {
  active
  canceled
  past_due
  unpaid
}

enum TransactionType {
  subscription
  connection_fee
  success_fee
  refund
}

enum TransactionStatus {
  pending
  completed
  failed
  refunded
}

enum EntityType {
  team
  company
  opportunity
}

// Core Tables
model User {
  id                String    @id @default(uuid())
  email             String    @unique
  passwordHash      String?   @map("password_hash")
  firstName         String    @map("first_name")
  lastName          String    @map("last_name")
  userType          UserType  @map("user_type")
  emailVerified     Boolean   @default(false) @map("email_verified")
  phoneVerified     Boolean   @default(false) @map("phone_verified")
  profileCompleted  Boolean   @default(false) @map("profile_completed")
  lastActive        DateTime? @map("last_active")
  timezone          String    @default("UTC")
  locale            String    @default("en-US")
  metadata          Json      @default("{}")
  createdAt         DateTime  @default(now()) @map("created_at")
  updatedAt         DateTime  @updatedAt @map("updated_at")

  // Relations
  profile                IndividualProfile?
  skills                 UserSkill[]
  teamMemberships        TeamMember[]
  companyMemberships     CompanyUser[]
  createdTeams           Team[]                   @relation("TeamCreator")
  createdOpportunities   Opportunity[]            @relation("OpportunityCreator")
  sentMessages           Message[]                @relation("MessageSender")
  notifications          Notification[]
  profileViews           ProfileView[]
  subscriptions          Subscription[]
  invitedTeamMembers     TeamMember[]             @relation("TeamMemberInviter")
  appliedApplications    TeamApplication[]        @relation("ApplicationApplier")
  expressionsOfInterest  ExpressionOfInterest[]
  conversationSenders    ConversationParticipant[]
  savedItems             SavedItem[]

  @@map("users")
}

model IndividualProfile {
  id                     String              @id @default(uuid())
  userId                 String              @unique @map("user_id")
  title                  String?
  location               String?
  bio                    String?
  yearsExperience        Int?                @map("years_experience")
  profilePhotoUrl        String?             @map("profile_photo_url")
  resumeUrl              String?             @map("resume_url")
  linkedinUrl            String?             @map("linkedin_url")
  githubUrl              String?             @map("github_url")
  portfolioUrl           String?             @map("portfolio_url")
  availabilityStatus     AvailabilityStatus  @default(open_to_opportunities) @map("availability_status")
  salaryExpectationMin   Int?                @map("salary_expectation_min")
  salaryExpectationMax   Int?                @map("salary_expectation_max")
  salaryCurrency         String              @default("USD") @map("salary_currency")
  willingToRelocate      Boolean             @default(false) @map("willing_to_relocate")
  remotePreference       RemotePreference    @default(hybrid) @map("remote_preference")
  currentEmployer        String?             @map("current_employer")
  currentTitle           String?             @map("current_title")
  hideFromCurrentEmployer Boolean            @default(true) @map("hide_from_current_employer")
  skillsSummary          String?             @map("skills_summary")
  achievements           String?
  references             Json                @default("[]")
  certifications         Json                @default("[]")
  visibilitySettings     Json                @default("{\"profile\": \"public\", \"activity\": \"connections_only\"}") @map("visibility_settings")
  searchPreferences      Json                @default("{}") @map("search_preferences")
  createdAt              DateTime            @default(now()) @map("created_at")
  updatedAt              DateTime            @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("individual_profiles")
}

model Company {
  id                   String              @id @default(uuid())
  name                 String
  slug                 String?             @unique
  description          String?
  industry             String?
  companySize          CompanySize?        @map("company_size")
  foundedYear          Int?                @map("founded_year")
  websiteUrl           String?             @map("website_url")
  logoUrl              String?             @map("logo_url")
  coverImageUrl        String?             @map("cover_image_url")
  headquartersLocation String?             @map("headquarters_location")
  locations            Json                @default("[]")
  companyCulture       String?             @map("company_culture")
  values               Json                @default("[]")
  benefits             Json                @default("[]")
  techStack            Json                @default("[]") @map("tech_stack")
  verificationStatus   VerificationStatus  @default(pending) @map("verification_status")
  verificationDocs     Json                @default("[]") @map("verification_documents")
  verifiedAt           DateTime?           @map("verified_at")
  verifiedBy           String?             @map("verified_by")
  socialLinks          Json                @default("{}") @map("social_links")
  employeeCount        Int?                @map("employee_count")
  annualRevenue        BigInt?             @map("annual_revenue")
  fundingStage         String?             @map("funding_stage")
  totalFunding         BigInt?             @map("total_funding")
  foundedDate          DateTime?           @map("founded_date")
  stockSymbol          String?             @map("stock_symbol")
  crunchbaseUrl        String?             @map("crunchbase_url")
  glassdoorRating      Decimal?            @map("glassdoor_rating")
  settings             Json                @default("{}")
  createdAt            DateTime            @default(now()) @map("created_at")
  updatedAt            DateTime            @updatedAt @map("updated_at")

  // Relations
  users         CompanyUser[]
  opportunities Opportunity[]
  subscriptions Subscription[]

  @@map("companies")
}

model CompanyUser {
  id                   String    @id @default(uuid())
  companyId            String    @map("company_id")
  userId               String    @map("user_id")
  role                 String    @default("member")
  permissions          Json      @default("{}")
  department           String?
  title                String?
  isPrimaryContact     Boolean   @default(false) @map("is_primary_contact")
  invitedBy            String?   @map("invited_by")
  invitationToken      String?   @map("invitation_token")
  invitationExpiresAt  DateTime? @map("invitation_expires_at")
  joinedAt             DateTime  @default(now()) @map("joined_at")
  createdAt            DateTime  @default(now()) @map("created_at")

  // Relations
  company Company @relation(fields: [companyId], references: [id], onDelete: Cascade)
  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([companyId, userId])
  @@map("company_users")
}

model Team {
  id                      String                 @id @default(uuid())
  name                    String
  slug                    String?                @unique
  description             String?
  industry                String?
  specialization          String?
  size                    Int
  location                String?
  remoteStatus            RemotePreference       @default(hybrid) @map("remote_status")
  availabilityStatus      TeamAvailabilityStatus @default(available) @map("availability_status")
  yearsWorkingTogether    Decimal?               @map("years_working_together")
  teamCulture             String?                @map("team_culture")
  workingStyle            String?                @map("working_style")
  communicationStyle      String?                @map("communication_style")
  notableAchievements     String?                @map("notable_achievements")
  portfolioUrl            String?                @map("portfolio_url")
  caseStudies             Json                   @default("[]") @map("case_studies")
  performanceMetrics      Json                   @default("{}") @map("performance_metrics")
  clientTestimonials      Json                   @default("[]") @map("client_testimonials")
  awardsRecognition       Json                   @default("[]") @map("awards_recognition")
  isAnonymous             Boolean                @default(false) @map("is_anonymous")
  visibility              TeamVisibility         @default(public)
  blockedCompanies        Json                   @default("[]") @map("blocked_companies")
  preferredCompanyTypes   Json                   @default("[]") @map("preferred_company_types")
  salaryExpectationMin    Int?                   @map("salary_expectation_min")
  salaryExpectationMax    Int?                   @map("salary_expectation_max")
  salaryCurrency          String                 @default("USD") @map("salary_currency")
  equityExpectation       String?                @map("equity_expectation")
  benefitsRequirements    Json                   @default("[]") @map("benefits_requirements")
  availabilityDate        DateTime?              @map("availability_date")
  contractPreferences     Json                   @default("{}") @map("contract_preferences")
  relocationWillingness   Boolean                @default(false) @map("relocation_willingness")
  createdBy               String                 @map("created_by")
  metadata                Json                   @default("{}")
  createdAt               DateTime               @default(now()) @map("created_at")
  updatedAt               DateTime               @updatedAt @map("updated_at")

  // Relations
  creator      User              @relation("TeamCreator", fields: [createdBy], references: [id])
  members      TeamMember[]
  applications TeamApplication[]

  @@map("teams")
}

model TeamMember {
  id                   String       @id @default(uuid())
  teamId               String       @map("team_id")
  userId               String       @map("user_id")
  role                 String?
  specialization       String?
  seniorityLevel       SeniorityLevel @default(mid) @map("seniority_level")
  isAdmin              Boolean      @default(false) @map("is_admin")
  isLead               Boolean      @default(false) @map("is_lead")
  joinDate             DateTime?    @map("join_date")
  contribution         String?
  keySkills            Json         @default("[]") @map("key_skills")
  status               MemberStatus @default(active)
  invitationToken      String?      @map("invitation_token")
  invitedBy            String?      @map("invited_by")
  invitedAt            DateTime?    @map("invited_at")
  invitationExpiresAt  DateTime?    @map("invitation_expires_at")
  joinedAt             DateTime     @default(now()) @map("joined_at")
  leftAt               DateTime?    @map("left_at")
  performanceNotes     String?      @map("performance_notes")
  createdAt            DateTime     @default(now()) @map("created_at")

  // Relations
  team    Team  @relation(fields: [teamId], references: [id], onDelete: Cascade)
  user    User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  inviter User? @relation("TeamMemberInviter", fields: [invitedBy], references: [id])

  @@unique([teamId, userId])
  @@map("team_members")
}

model Skill {
  id          Int        @id @default(autoincrement())
  name        String     @unique
  category    String?
  industry    String?
  description String?
  isVerified  Boolean    @default(false) @map("is_verified")
  usageCount  Int        @default(0) @map("usage_count")
  createdAt   DateTime   @default(now()) @map("created_at")

  // Relations
  userSkills UserSkill[]

  @@map("skills")
}

model UserSkill {
  id               String           @id @default(uuid())
  userId           String           @map("user_id")
  skillId          Int              @map("skill_id")
  proficiencyLevel ProficiencyLevel @default(intermediate) @map("proficiency_level")
  yearsExperience  Int?             @map("years_experience")
  lastUsed         DateTime?        @map("last_used")
  verified         Boolean          @default(false)
  verifiedBy       String?          @map("verified_by")
  endorsedBy       Json             @default("[]") @map("endorsed_by")
  createdAt        DateTime         @default(now()) @map("created_at")

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  skill Skill @relation(fields: [skillId], references: [id])

  @@unique([userId, skillId])
  @@map("user_skills")
}

model Opportunity {
  id                   String            @id @default(uuid())
  companyId            String            @map("company_id")
  title                String
  description          String
  teamSizeMin          Int?              @map("team_size_min")
  teamSizeMax          Int?              @map("team_size_max")
  requiredSkills       Json              @default("[]") @map("required_skills")
  preferredSkills      Json              @default("[]") @map("preferred_skills")
  niceToHaveSkills     Json              @default("[]") @map("nice_to_have_skills")
  industry             String?
  department           String?
  seniorityLevel       SeniorityLevel?   @map("seniority_level")
  location             String?
  multipleLocations    Json              @default("[]") @map("multiple_locations")
  remotePolicy         RemotePreference  @default(hybrid) @map("remote_policy")
  compensationMin      Int?              @map("compensation_min")
  compensationMax      Int?              @map("compensation_max")
  compensationCurrency String            @default("USD") @map("compensation_currency")
  equityOffered        Boolean           @default(false) @map("equity_offered")
  equityRange          String?           @map("equity_range")
  benefits             Json              @default("[]")
  perks                Json              @default("[]")
  urgency              UrgencyLevel      @default(standard)
  startDate            DateTime?         @map("start_date")
  projectDuration      String?           @map("project_duration")
  contractType         String            @default("full_time") @map("contract_type")
  reportingStructure   String?           @map("reporting_structure")
  growthOpportunities  String?           @map("growth_opportunities")
  techStack            Json              @default("[]") @map("tech_stack")
  teamStructure        String?           @map("team_structure")
  interviewProcess     String?           @map("interview_process")
  onboardingPlan       String?           @map("onboarding_plan")
  successMetrics       String?           @map("success_metrics")
  challenges           String?
  isAnonymous          Boolean           @default(false) @map("is_anonymous")
  visibility           String            @default("public")
  externalId           String?           @map("external_id")
  source               String?
  status               OpportunityStatus @default(active)
  applicationsCount    Int               @default(0) @map("applications_count")
  viewsCount           Int               @default(0) @map("views_count")
  savesCount           Int               @default(0) @map("saves_count")
  featured             Boolean           @default(false)
  featuredUntil        DateTime?         @map("featured_until")
  boostScore           Decimal           @default(1.0) @map("boost_score")
  createdBy            String            @map("created_by")
  expiresAt            DateTime?         @map("expires_at")
  metadata             Json              @default("{}")
  createdAt            DateTime          @default(now()) @map("created_at")
  updatedAt            DateTime          @updatedAt @map("updated_at")

  // Relations
  company      Company           @relation(fields: [companyId], references: [id], onDelete: Cascade)
  creator      User              @relation("OpportunityCreator", fields: [createdBy], references: [id])
  applications TeamApplication[]

  @@map("opportunities")
}

model TeamApplication {
  id                     String            @id @default(uuid())
  teamId                 String            @map("team_id")
  opportunityId          String            @map("opportunity_id")
  coverLetter            String?           @map("cover_letter")
  proposedCompensation   Int?              @map("proposed_compensation")
  proposedEquity         String?           @map("proposed_equity")
  availabilityDate       DateTime?         @map("availability_date")
  customProposal         String?           @map("custom_proposal")
  attachments            Json              @default("[]")
  teamFitExplanation     String?           @map("team_fit_explanation")
  questionsForCompany    String?           @map("questions_for_company")
  status                 ApplicationStatus @default(submitted)
  rejectionReason        String?           @map("rejection_reason")
  interviewFeedback      Json              @default("{}") @map("interview_feedback")
  offerDetails           Json              @default("{}") @map("offer_details")
  appliedBy              String            @map("applied_by")
  appliedAt              DateTime          @default(now()) @map("applied_at")
  reviewedAt             DateTime?         @map("reviewed_at")
  interviewScheduledAt   DateTime?         @map("interview_scheduled_at")
  offerMadeAt            DateTime?         @map("offer_made_at")
  responseDeadline       DateTime?         @map("response_deadline")
  finalDecisionAt        DateTime?         @map("final_decision_at")
  responseMessage        String?           @map("response_message")
  recruiterNotes         String?           @map("recruiter_notes")
  hiringManagerNotes     String?           @map("hiring_manager_notes")
  createdAt              DateTime          @default(now()) @map("created_at")

  // Relations
  team        Team        @relation(fields: [teamId], references: [id], onDelete: Cascade)
  opportunity Opportunity @relation(fields: [opportunityId], references: [id], onDelete: Cascade)
  applier     User        @relation("ApplicationApplier", fields: [appliedBy], references: [id])

  @@unique([teamId, opportunityId])
  @@map("team_applications")
}

model ExpressionOfInterest {
  id                String        @id @default(uuid())
  fromType          EntityType    @map("from_type")
  fromId            String        @map("from_id")
  toType            EntityType    @map("to_type")
  toId              String        @map("to_id")
  message           String?
  interestLevel     String        @default("medium") @map("interest_level")
  specificRole      String?       @map("specific_role")
  timeline          String?
  budgetRange       String?       @map("budget_range")
  status            InterestStatus @default(pending)
  connectionFeePaid Boolean       @default(false) @map("connection_fee_paid")
  paymentIntentId   String?       @map("payment_intent_id")
  revealed          Boolean       @default(false)
  revelationExpiresAt DateTime?   @map("revelation_expires_at")
  followUpCount     Int           @default(0) @map("follow_up_count")
  lastFollowUpAt    DateTime?     @map("last_follow_up_at")
  createdAt         DateTime      @default(now()) @map("created_at")
  respondedAt       DateTime?     @map("responded_at")
  expiresAt         DateTime?     @map("expires_at")
  metadata          Json          @default("{}")

  // Relations
  sender User @relation(fields: [fromId], references: [id])

  @@map("expressions_of_interest")
}

model Conversation {
  id             String              @id @default(uuid())
  teamId         String?             @map("team_id")
  companyId      String?             @map("company_id")
  opportunityId  String?             @map("opportunity_id")
  interestId     String?             @map("interest_id")
  subject        String?
  status         ConversationStatus  @default(active)
  isAnonymous    Boolean             @default(false) @map("is_anonymous")
  participants   Json                @default("[]")
  participantRoles Json              @default("{}") @map("participant_roles")
  archivedBy     Json                @default("[]") @map("archived_by")
  lastMessageAt  DateTime?           @map("last_message_at")
  messageCount   Int                 @default(0) @map("message_count")
  unreadCounts   Json                @default("{}") @map("unread_counts")
  tags           Json                @default("[]")
  priority       Priority            @default(medium)
  scheduledFor   DateTime?           @map("scheduled_for")
  reminderSent   Boolean             @default(false) @map("reminder_sent")
  createdAt      DateTime            @default(now()) @map("created_at")
  updatedAt      DateTime            @updatedAt @map("updated_at")

  // Relations
  messages     Message[]
  participants ConversationParticipant[]

  @@map("conversations")
}

model ConversationParticipant {
  id             String   @id @default(uuid())
  conversationId String   @map("conversation_id")
  userId         String   @map("user_id")
  role           String   @default("participant")
  joinedAt       DateTime @default(now()) @map("joined_at")
  leftAt         DateTime? @map("left_at")
  lastReadAt     DateTime? @map("last_read_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([conversationId, userId])
  @@map("conversation_participants")
}

model Message {
  id             String      @id @default(uuid())
  conversationId String      @map("conversation_id")
  senderId       String?     @map("sender_id")
  senderType     EntityType  @map("sender_type")
  replyToId      String?     @map("reply_to_id")
  content        String
  contentHtml    String?     @map("content_html")
  messageType    MessageType @default(text) @map("message_type")
  attachments    Json        @default("[]")
  metadata       Json        @default("{}")
  isRead         Boolean     @default(false) @map("is_read")
  readBy         Json        @default("[]") @map("read_by")
  readAt         DateTime?   @map("read_at")
  editedAt       DateTime?   @map("edited_at")
  deletedAt      DateTime?   @map("deleted_at")
  reactions      Json        @default("{}")
  mentions       Json        @default("[]")
  sentAt         DateTime    @default(now()) @map("sent_at")
  deliveredAt    DateTime?   @map("delivered_at")
  createdAt      DateTime    @default(now()) @map("created_at")

  // Relations
  conversation Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  sender       User?        @relation("MessageSender", fields: [senderId], references: [id])
  replyTo      Message?     @relation("MessageReply", fields: [replyToId], references: [id])
  replies      Message[]    @relation("MessageReply")

  @@map("messages")
}

model ProfileView {
  id          String     @id @default(uuid())
  viewerId    String?    @map("viewer_id")
  viewerType  EntityType? @map("viewer_type")
  viewedType  EntityType @map("viewed_type")
  viewedId    String     @map("viewed_id")
  viewSource  String?    @map("view_source")
  viewDuration Int?      @map("view_duration")
  pagesViewed Json       @default("[]") @map("pages_viewed")
  referrer    String?
  userAgent   String?    @map("user_agent")
  ipAddress   String?    @map("ip_address")
  isAnonymous Boolean    @default(false) @map("is_anonymous")
  viewedAt    DateTime   @default(now()) @map("viewed_at")
  sessionId   String?    @map("session_id")

  // Relations
  viewer User? @relation(fields: [viewerId], references: [id])

  @@map("profile_views")
}

model SearchQuery {
  id                String   @id @default(uuid())
  userId            String?  @map("user_id")
  sessionId         String?  @map("session_id")
  queryText         String?  @map("query_text")
  searchType        String?  @map("search_type")
  filters           Json     @default("{}")
  sortOptions       Json     @default("{}") @map("sort_options")
  resultsCount      Int?     @map("results_count")
  clickedResults    Json     @default("[]") @map("clicked_results")
  timeSpentOnResults Int?    @map("time_spent_on_results")
  refinementsCount  Int      @default(0) @map("refinements_count")
  conversionEvent   String?  @map("conversion_event")
  searchedAt        DateTime @default(now()) @map("searched_at")
  ipAddress         String?  @map("ip_address")
  userAgent         String?  @map("user_agent")

  @@map("search_queries")
}

model SavedItem {
  id           String     @id @default(uuid())
  userId       String     @map("user_id")
  itemType     EntityType @map("item_type")
  itemId       String     @map("item_id")
  notes        String?
  tags         Json       @default("[]")
  folder       String?
  priority     Priority   @default(medium)
  reminderDate DateTime?  @map("reminder_date")
  reminderSent Boolean    @default(false) @map("reminder_sent")
  createdAt    DateTime   @default(now()) @map("created_at")
  updatedAt    DateTime   @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, itemType, itemId])
  @@map("saved_items")
}

model Notification {
  id             String           @id @default(uuid())
  userId         String           @map("user_id")
  type           NotificationType
  title          String
  message        String
  data           Json             @default("{}")
  actionUrl      String?          @map("action_url")
  isRead         Boolean          @default(false) @map("is_read")
  readAt         DateTime?        @map("read_at")
  priority       Priority         @default(medium)
  deliveryMethod Json             @default("[\"in_app\"]") @map("delivery_method")
  sentViaEmail   Boolean          @default(false) @map("sent_via_email")
  sentViaPush    Boolean          @default(false) @map("sent_via_push")
  expiresAt      DateTime?        @map("expires_at")
  createdAt      DateTime         @default(now()) @map("created_at")
  updatedAt      DateTime         @updatedAt @map("updated_at")

  // Relations
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("notifications")
}

model UserPreferences {
  id                      String   @id @default(uuid())
  userId                  String   @unique @map("user_id")
  emailNotifications      Json     @default("{\"team_invites\": true, \"company_interest\": true, \"messages\": true}") @map("email_notifications")
  pushNotifications       Json     @default("{\"team_invites\": true, \"company_interest\": true, \"messages\": false}") @map("push_notifications")
  privacySettings         Json     @default("{\"profile_visibility\": \"public\", \"activity_visibility\": \"connections\"}") @map("privacy_settings")
  searchPreferences       Json     @default("{}") @map("search_preferences")
  communicationPrefs      Json     @default("{}") @map("communication_preferences")
  marketingPreferences    Json     @default("{\"product_updates\": true, \"industry_insights\": false}") @map("marketing_preferences")
  language                String   @default("en")
  timezone                String   @default("UTC")
  dateFormat              String   @default("MM/DD/YYYY") @map("date_format")
  currency                String   @default("USD")
  createdAt               DateTime @default(now()) @map("created_at")
  updatedAt               DateTime @updatedAt @map("updated_at")

  @@map("user_preferences")
}

model Subscription {
  id                    String             @id @default(uuid())
  userId                String?            @map("user_id")
  companyId             String?            @map("company_id")
  planType              SubscriptionPlan   @map("plan_type")
  planName              String?            @map("plan_name")
  status                SubscriptionStatus @default(active)
  billingCycle          String             @default("monthly") @map("billing_cycle")
  amount                Int
  currency              String             @default("USD")
  stripeCustomerId      String?            @map("stripe_customer_id")
  stripeSubscriptionId  String?            @map("stripe_subscription_id")
  stripePriceId         String?            @map("stripe_price_id")
  trialStart            DateTime?          @map("trial_start")
  trialEnd              DateTime?          @map("trial_end")
  currentPeriodStart    DateTime?          @map("current_period_start")
  currentPeriodEnd      DateTime?          @map("current_period_end")
  cancelAtPeriodEnd     Boolean            @default(false) @map("cancel_at_period_end")
  canceledAt            DateTime?          @map("canceled_at")
  cancellationReason    String?            @map("cancellation_reason")
  renewalCount          Int                @default(0) @map("renewal_count")
  discountCoupon        String?            @map("discount_coupon")
  discountPercent       Decimal?           @map("discount_percent")
  features              Json               @default("{}")
  usageLimits           Json               @default("{}") @map("usage_limits")
  currentUsage          Json               @default("{}") @map("current_usage")
  createdAt             DateTime           @default(now()) @map("created_at")
  updatedAt             DateTime           @updatedAt @map("updated_at")

  // Relations
  user    User?    @relation(fields: [userId], references: [id])
  company Company? @relation(fields: [companyId], references: [id])

  @@map("subscriptions")
}

model Transaction {
  id                     String            @id @default(uuid())
  userId                 String?           @map("user_id")
  companyId              String?           @map("company_id")
  subscriptionId         String?           @map("subscription_id")
  amount                 Int
  currency               String            @default("USD")
  transactionType        TransactionType   @map("transaction_type")
  description            String?
  stripePaymentIntentId  String?           @map("stripe_payment_intent_id")
  stripeChargeId         String?           @map("stripe_charge_id")
  paymentMethodId        String?           @map("payment_method_id")
  status                 TransactionStatus @default(pending)
  failureReason          String?           @map("failure_reason")
  refundAmount           Int?              @map("refund_amount")
  refundReason           String?           @map("refund_reason")
  metadata               Json              @default("{}")
  processedAt            DateTime?         @map("processed_at")
  createdAt              DateTime          @default(now()) @map("created_at")
  updatedAt              DateTime          @updatedAt @map("updated_at")

  @@map("transactions")
}

model AuditLog {
  id           String   @id @default(uuid())
  userId       String?  @map("user_id")
  action       String
  resourceType String   @map("resource_type")
  resourceId   String?  @map("resource_id")
  oldValues    Json?    @map("old_values")
  newValues    Json?    @map("new_values")
  ipAddress    String?  @map("ip_address")
  userAgent    String?  @map("user_agent")
  sessionId    String?  @map("session_id")
  createdAt    DateTime @default(now()) @map("created_at")

  @@map("audit_logs")
}